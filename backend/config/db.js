const { Pool } = require('pg');
const prompt = require('prompt-sync')({ sigint: true });

// Ki·ªÉm tra m√¥i tr∆∞·ªùng ph√°t tri·ªÉn
const isDevelopment = process.env.NODE_ENV === 'development';

// H√†m y√™u c·∫ßu dev nh·∫≠p th√¥ng tin
function getDatabaseConfig() {
  if (!isDevelopment) {
    throw new Error('‚ùå Ch·ªâ ƒë∆∞·ª£c nh·∫≠p th√¥ng tin c∆° s·ªü d·ªØ li·ªáu trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn');
  }

  console.log('üìã Vui l√≤ng nh·∫≠p th√¥ng tin c∆° s·ªü d·ªØ li·ªáu:');
  const user = prompt('Username [postgres]: ') || 'postgres';
  const host = prompt('Server [localhost]: ') || 'localhost';
  const port = prompt('Port [5432]: ') || '5432';
  const database = prompt('T√™n database (v√≠ d·ª•: QAirline): ');
  const password = prompt('M·∫≠t kh·∫©u database: ', { echo: '*' }); // ·∫®n m·∫≠t kh·∫©u khi nh·∫≠p

  if (!database || !password || !user || !host || !port) {
    throw new Error('‚ùå C√°c tr∆∞·ªùng user, host, port, database, password kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
  }

  return {
    user,
    host,
    port: parseInt(port, 10),
    database,
    password,
  };
}

// C·∫•u h√¨nh Pool
let config;
try {
  config = {
    user: process.env.PGUSER || 'postgres',
    host: process.env.PGHOST || 'localhost',
    port: process.env.PGPORT ? parseInt(process.env.PGPORT, 10) : 5432,
    max: 10, // S·ªë k·∫øt n·ªëi t·ªëi ƒëa
    idleTimeoutMillis: 30000, // Ng·∫Øt k·∫øt n·ªëi sau 30 gi√¢y kh√¥ng ho·∫°t ƒë·ªông
    connectionTimeoutMillis: 10000, // Timeout k·∫øt n·ªëi sau 10 gi√¢y
  };

  // N·∫øu l√† m√¥i tr∆∞·ªùng ph√°t tri·ªÉn, y√™u c·∫ßu nh·∫≠p th√¥ng tin
  if (isDevelopment) {
    const { user, host, port, database, password } = getDatabaseConfig();
    config.user = user;
    config.host = host;
    config.port = port;
    config.database = database;
    config.password = password;
  } else {
    // Trong production, l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    config.database = process.env.PGDATABASE;
    config.password = process.env.PGPASSWORD;
    if (!config.database || !config.password) {
      throw new Error('‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng PGDATABASE ho·∫∑c PGPASSWORD trong production');
    }
  }

  // Debug: In ra c·∫•u h√¨nh ƒë·ªÉ ki·ªÉm tra
  console.log('üîç C·∫•u h√¨nh k·∫øt n·ªëi:', {
    user: config.user,
    host: config.host,
    port: config.port,
    database: config.database,
    password: isDevelopment ? config.password : '[·∫©n]',
  });
} catch (error) {
  console.error('‚ùå L·ªói c·∫•u h√¨nh:', error.message);
  process.exit(1); // Tho√°t ·ª©ng d·ª•ng n·∫øu c·∫•u h√¨nh l·ªói
}

const pool = new Pool(config);

pool.on('connect', () => {
  console.log(
    `‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi c∆° s·ªü d·ªØ li·ªáu PostgreSQL! ` +
    `T√™n database: ${config.database}, ` +
    `Host: ${config.host}, ` +
    `Port: ${config.port}, ` +
    `User: ${config.user}`
  );
});

pool.on('error', (err) => {
  console.error(
    `‚ùå L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu: ${err.message}. ` +
    `T√™n database: ${config.database}, ` +
    `Host: ${config.host}, ` +
    `Port: ${config.port}, ` +
    `User: ${config.user}`,
    err.stack
  );
});

module.exports = pool;